// Code generated by protoc-gen-go.
// source: Ola.proto
// DO NOT EDIT!

/*
Package ola_proto is a generated protocol buffer package.

It is generated from these files:
	Ola.proto

It has these top-level messages:
	STREAMING_NO_RESPONSE
	Ack
	PluginListRequest
	PluginReloadRequest
	PluginInfo
	PluginListReply
	PluginDescriptionRequest
	PluginDescriptionReply
	PluginStateRequest
	PluginStateReply
	DeviceInfoRequest
	PortInfo
	DeviceInfo
	DeviceInfoReply
	DmxData
	RegisterDmxRequest
	PatchPortRequest
	UniverseNameRequest
	MergeModeRequest
	OptionalUniverseRequest
	UniverseInfo
	UniverseInfoReply
	PortPriorityRequest
	DeviceConfigRequest
	DeviceConfigReply
	UID
	UniverseRequest
	DiscoveryRequest
	UIDListReply
	RDMRequest
	RDMDiscoveryRequest
	RDMResponse
	TimeCode
*/
package ola_proto

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type RegisterAction int32

const (
	RegisterAction_REGISTER   RegisterAction = 1
	RegisterAction_UNREGISTER RegisterAction = 2
)

var RegisterAction_name = map[int32]string{
	1: "REGISTER",
	2: "UNREGISTER",
}
var RegisterAction_value = map[string]int32{
	"REGISTER":   1,
	"UNREGISTER": 2,
}

func (x RegisterAction) Enum() *RegisterAction {
	p := new(RegisterAction)
	*p = x
	return p
}
func (x RegisterAction) String() string {
	return proto.EnumName(RegisterAction_name, int32(x))
}
func (x *RegisterAction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RegisterAction_value, data, "RegisterAction")
	if err != nil {
		return err
	}
	*x = RegisterAction(value)
	return nil
}

type PatchAction int32

const (
	PatchAction_PATCH   PatchAction = 1
	PatchAction_UNPATCH PatchAction = 2
)

var PatchAction_name = map[int32]string{
	1: "PATCH",
	2: "UNPATCH",
}
var PatchAction_value = map[string]int32{
	"PATCH":   1,
	"UNPATCH": 2,
}

func (x PatchAction) Enum() *PatchAction {
	p := new(PatchAction)
	*p = x
	return p
}
func (x PatchAction) String() string {
	return proto.EnumName(PatchAction_name, int32(x))
}
func (x *PatchAction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PatchAction_value, data, "PatchAction")
	if err != nil {
		return err
	}
	*x = PatchAction(value)
	return nil
}

type MergeMode int32

const (
	MergeMode_HTP MergeMode = 1
	MergeMode_LTP MergeMode = 2
)

var MergeMode_name = map[int32]string{
	1: "HTP",
	2: "LTP",
}
var MergeMode_value = map[string]int32{
	"HTP": 1,
	"LTP": 2,
}

func (x MergeMode) Enum() *MergeMode {
	p := new(MergeMode)
	*p = x
	return p
}
func (x MergeMode) String() string {
	return proto.EnumName(MergeMode_name, int32(x))
}
func (x *MergeMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MergeMode_value, data, "MergeMode")
	if err != nil {
		return err
	}
	*x = MergeMode(value)
	return nil
}

// *
// Please see the note below about getting a new Plugin ID.
type PluginIds int32

const (
	PluginIds_OLA_PLUGIN_ALL              PluginIds = 0
	PluginIds_OLA_PLUGIN_DUMMY            PluginIds = 1
	PluginIds_OLA_PLUGIN_ARTNET           PluginIds = 2
	PluginIds_OLA_PLUGIN_SHOWNET          PluginIds = 3
	PluginIds_OLA_PLUGIN_ESPNET           PluginIds = 4
	PluginIds_OLA_PLUGIN_USBPRO           PluginIds = 5
	PluginIds_OLA_PLUGIN_OPENDMX          PluginIds = 6
	PluginIds_OLA_PLUGIN_SANDNET          PluginIds = 7
	PluginIds_OLA_PLUGIN_STAGEPROFI       PluginIds = 8
	PluginIds_OLA_PLUGIN_PATHPORT         PluginIds = 9
	PluginIds_OLA_PLUGIN_DMX4LINUX        PluginIds = 10
	PluginIds_OLA_PLUGIN_E131             PluginIds = 11
	PluginIds_OLA_PLUGIN_USBDMX           PluginIds = 12
	PluginIds_OLA_PLUGIN_FTDIDMX          PluginIds = 13
	PluginIds_OLA_PLUGIN_OSC              PluginIds = 14
	PluginIds_OLA_PLUGIN_SPI              PluginIds = 15
	PluginIds_OLA_PLUGIN_KINET            PluginIds = 16
	PluginIds_OLA_PLUGIN_KARATE           PluginIds = 17
	PluginIds_OLA_PLUGIN_MILINST          PluginIds = 18
	PluginIds_OLA_PLUGIN_RENARD           PluginIds = 19
	PluginIds_OLA_PLUGIN_UARTDMX          PluginIds = 20
	PluginIds_OLA_PLUGIN_OPENPIXELCONTROL PluginIds = 21
	PluginIds_OLA_PLUGIN_GPIO             PluginIds = 22
	//
	// To obtain a new plugin ID, open a ticket at
	// https://github.com/OpenLightingProject/ola/issues/new
	// Plugin IDs are usually assigned just prior to merging the code into the
	// mainline. For development of plugins please use the value of
	// OLA_PLUGIN_EXPERIMENTAL in a plugin ID you define above.
	PluginIds_OLA_PLUGIN_EXPERIMENTAL PluginIds = 10000
)

var PluginIds_name = map[int32]string{
	0:     "OLA_PLUGIN_ALL",
	1:     "OLA_PLUGIN_DUMMY",
	2:     "OLA_PLUGIN_ARTNET",
	3:     "OLA_PLUGIN_SHOWNET",
	4:     "OLA_PLUGIN_ESPNET",
	5:     "OLA_PLUGIN_USBPRO",
	6:     "OLA_PLUGIN_OPENDMX",
	7:     "OLA_PLUGIN_SANDNET",
	8:     "OLA_PLUGIN_STAGEPROFI",
	9:     "OLA_PLUGIN_PATHPORT",
	10:    "OLA_PLUGIN_DMX4LINUX",
	11:    "OLA_PLUGIN_E131",
	12:    "OLA_PLUGIN_USBDMX",
	13:    "OLA_PLUGIN_FTDIDMX",
	14:    "OLA_PLUGIN_OSC",
	15:    "OLA_PLUGIN_SPI",
	16:    "OLA_PLUGIN_KINET",
	17:    "OLA_PLUGIN_KARATE",
	18:    "OLA_PLUGIN_MILINST",
	19:    "OLA_PLUGIN_RENARD",
	20:    "OLA_PLUGIN_UARTDMX",
	21:    "OLA_PLUGIN_OPENPIXELCONTROL",
	22:    "OLA_PLUGIN_GPIO",
	10000: "OLA_PLUGIN_EXPERIMENTAL",
}
var PluginIds_value = map[string]int32{
	"OLA_PLUGIN_ALL":              0,
	"OLA_PLUGIN_DUMMY":            1,
	"OLA_PLUGIN_ARTNET":           2,
	"OLA_PLUGIN_SHOWNET":          3,
	"OLA_PLUGIN_ESPNET":           4,
	"OLA_PLUGIN_USBPRO":           5,
	"OLA_PLUGIN_OPENDMX":          6,
	"OLA_PLUGIN_SANDNET":          7,
	"OLA_PLUGIN_STAGEPROFI":       8,
	"OLA_PLUGIN_PATHPORT":         9,
	"OLA_PLUGIN_DMX4LINUX":        10,
	"OLA_PLUGIN_E131":             11,
	"OLA_PLUGIN_USBDMX":           12,
	"OLA_PLUGIN_FTDIDMX":          13,
	"OLA_PLUGIN_OSC":              14,
	"OLA_PLUGIN_SPI":              15,
	"OLA_PLUGIN_KINET":            16,
	"OLA_PLUGIN_KARATE":           17,
	"OLA_PLUGIN_MILINST":          18,
	"OLA_PLUGIN_RENARD":           19,
	"OLA_PLUGIN_UARTDMX":          20,
	"OLA_PLUGIN_OPENPIXELCONTROL": 21,
	"OLA_PLUGIN_GPIO":             22,
	"OLA_PLUGIN_EXPERIMENTAL":     10000,
}

func (x PluginIds) Enum() *PluginIds {
	p := new(PluginIds)
	*p = x
	return p
}
func (x PluginIds) String() string {
	return proto.EnumName(PluginIds_name, int32(x))
}
func (x *PluginIds) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PluginIds_value, data, "PluginIds")
	if err != nil {
		return err
	}
	*x = PluginIds(value)
	return nil
}

// *
// If you add more here be sure to update ResponseCodeToString in RDMHelper.cpp
type RDMResponseCode int32

const (
	// The request/response completed correctly
	RDMResponseCode_RDM_COMPLETED_OK RDMResponseCode = 0
	// The request was broadcast, no respone expected
	RDMResponseCode_RDM_WAS_BROADCAST RDMResponseCode = 1
	// We failed to send this request
	RDMResponseCode_RDM_FAILED_TO_SEND RDMResponseCode = 2
	// The response timed out
	RDMResponseCode_RDM_TIMEOUT RDMResponseCode = 3
	// The response was invalid
	RDMResponseCode_RDM_INVALID_RESPONSE RDMResponseCode = 4
	// The UID could not be located (may have been removed)
	RDMResponseCode_RDM_UNKNOWN_UID RDMResponseCode = 5
	// The response checksum was wrong
	RDMResponseCode_RDM_CHECKSUM_INCORRECT RDMResponseCode = 6
	// Invalid transaction number
	RDMResponseCode_RDM_TRANSACTION_MISMATCH RDMResponseCode = 7
	// Wrong sub device
	RDMResponseCode_RDM_SUB_DEVICE_MISMATCH RDMResponseCode = 8
	// Source UID in response doesn't match
	RDMResponseCode_RDM_SRC_UID_MISMATCH RDMResponseCode = 9
	// Destination UID in response doesn't match
	RDMResponseCode_RDM_DEST_UID_MISMATCH RDMResponseCode = 10
	// Incorrect sub start code
	RDMResponseCode_RDM_WRONG_SUB_START_CODE RDMResponseCode = 11
	// RDM response was smaller than the minimum size
	RDMResponseCode_RDM_PACKET_TOO_SHORT RDMResponseCode = 12
	// The length field of packet didn't match length received
	RDMResponseCode_RDM_PACKET_LENGTH_MISMATCH RDMResponseCode = 13
	// The parameter length exceeds the remaining packet size
	RDMResponseCode_RDM_PARAM_LENGTH_MISMATCH RDMResponseCode = 14
	// The command class was not one of GET_RESPONSE or SET_RESPONSE
	RDMResponseCode_RDM_INVALID_COMMAND_CLASS RDMResponseCode = 15
	// The command class didn't match the request
	RDMResponseCode_RDM_COMMAND_CLASS_MISMATCH RDMResponseCode = 16
	// The response type was not ACK, ACK_OVERFLOW, ACK_TIMER or NACK
	RDMResponseCode_RDM_INVALID_RESPONSE_TYPE RDMResponseCode = 17
	// The discovery command class is not supported by this device. This
	// typically means the hardware doesn't support discovery commands.
	RDMResponseCode_RDM_PLUGIN_DISCOVERY_NOT_SUPPORTED RDMResponseCode = 18
	// Responses to DUB commands, these responses won't have a defined RDM
	// message, but rather just a string of bytes from the wire.
	RDMResponseCode_RDM_DUB_RESPONSE RDMResponseCode = 19
)

var RDMResponseCode_name = map[int32]string{
	0:  "RDM_COMPLETED_OK",
	1:  "RDM_WAS_BROADCAST",
	2:  "RDM_FAILED_TO_SEND",
	3:  "RDM_TIMEOUT",
	4:  "RDM_INVALID_RESPONSE",
	5:  "RDM_UNKNOWN_UID",
	6:  "RDM_CHECKSUM_INCORRECT",
	7:  "RDM_TRANSACTION_MISMATCH",
	8:  "RDM_SUB_DEVICE_MISMATCH",
	9:  "RDM_SRC_UID_MISMATCH",
	10: "RDM_DEST_UID_MISMATCH",
	11: "RDM_WRONG_SUB_START_CODE",
	12: "RDM_PACKET_TOO_SHORT",
	13: "RDM_PACKET_LENGTH_MISMATCH",
	14: "RDM_PARAM_LENGTH_MISMATCH",
	15: "RDM_INVALID_COMMAND_CLASS",
	16: "RDM_COMMAND_CLASS_MISMATCH",
	17: "RDM_INVALID_RESPONSE_TYPE",
	18: "RDM_PLUGIN_DISCOVERY_NOT_SUPPORTED",
	19: "RDM_DUB_RESPONSE",
}
var RDMResponseCode_value = map[string]int32{
	"RDM_COMPLETED_OK":                   0,
	"RDM_WAS_BROADCAST":                  1,
	"RDM_FAILED_TO_SEND":                 2,
	"RDM_TIMEOUT":                        3,
	"RDM_INVALID_RESPONSE":               4,
	"RDM_UNKNOWN_UID":                    5,
	"RDM_CHECKSUM_INCORRECT":             6,
	"RDM_TRANSACTION_MISMATCH":           7,
	"RDM_SUB_DEVICE_MISMATCH":            8,
	"RDM_SRC_UID_MISMATCH":               9,
	"RDM_DEST_UID_MISMATCH":              10,
	"RDM_WRONG_SUB_START_CODE":           11,
	"RDM_PACKET_TOO_SHORT":               12,
	"RDM_PACKET_LENGTH_MISMATCH":         13,
	"RDM_PARAM_LENGTH_MISMATCH":          14,
	"RDM_INVALID_COMMAND_CLASS":          15,
	"RDM_COMMAND_CLASS_MISMATCH":         16,
	"RDM_INVALID_RESPONSE_TYPE":          17,
	"RDM_PLUGIN_DISCOVERY_NOT_SUPPORTED": 18,
	"RDM_DUB_RESPONSE":                   19,
}

func (x RDMResponseCode) Enum() *RDMResponseCode {
	p := new(RDMResponseCode)
	*p = x
	return p
}
func (x RDMResponseCode) String() string {
	return proto.EnumName(RDMResponseCode_name, int32(x))
}
func (x *RDMResponseCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RDMResponseCode_value, data, "RDMResponseCode")
	if err != nil {
		return err
	}
	*x = RDMResponseCode(value)
	return nil
}

// *
// The valid Response Types when the response_code is RDM_COMPLETED_OK.
// ACK_OVERFLOW isn't in this list because overflows are handed by the plugins,
// not the clients.
type RDMResponseType int32

const (
	RDMResponseType_RDM_ACK         RDMResponseType = 0
	RDMResponseType_RDM_ACK_TIMER   RDMResponseType = 1
	RDMResponseType_RDM_NACK_REASON RDMResponseType = 2
)

var RDMResponseType_name = map[int32]string{
	0: "RDM_ACK",
	1: "RDM_ACK_TIMER",
	2: "RDM_NACK_REASON",
}
var RDMResponseType_value = map[string]int32{
	"RDM_ACK":         0,
	"RDM_ACK_TIMER":   1,
	"RDM_NACK_REASON": 2,
}

func (x RDMResponseType) Enum() *RDMResponseType {
	p := new(RDMResponseType)
	*p = x
	return p
}
func (x RDMResponseType) String() string {
	return proto.EnumName(RDMResponseType_name, int32(x))
}
func (x *RDMResponseType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RDMResponseType_value, data, "RDMResponseType")
	if err != nil {
		return err
	}
	*x = RDMResponseType(value)
	return nil
}

// *
// The RDM command class
type RDMCommandClass int32

const (
	RDMCommandClass_RDM_GET_RESPONSE       RDMCommandClass = 0
	RDMCommandClass_RDM_SET_RESPONSE       RDMCommandClass = 1
	RDMCommandClass_RDM_DISCOVERY_RESPONSE RDMCommandClass = 2
)

var RDMCommandClass_name = map[int32]string{
	0: "RDM_GET_RESPONSE",
	1: "RDM_SET_RESPONSE",
	2: "RDM_DISCOVERY_RESPONSE",
}
var RDMCommandClass_value = map[string]int32{
	"RDM_GET_RESPONSE":       0,
	"RDM_SET_RESPONSE":       1,
	"RDM_DISCOVERY_RESPONSE": 2,
}

func (x RDMCommandClass) Enum() *RDMCommandClass {
	p := new(RDMCommandClass)
	*p = x
	return p
}
func (x RDMCommandClass) String() string {
	return proto.EnumName(RDMCommandClass_name, int32(x))
}
func (x *RDMCommandClass) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RDMCommandClass_value, data, "RDMCommandClass")
	if err != nil {
		return err
	}
	*x = RDMCommandClass(value)
	return nil
}

type TimeCodeType int32

const (
	TimeCodeType_TIMECODE_FILM  TimeCodeType = 0
	TimeCodeType_TIMECODE_EBU   TimeCodeType = 1
	TimeCodeType_TIMECODE_DF    TimeCodeType = 2
	TimeCodeType_TIMECODE_SMPTE TimeCodeType = 3
)

var TimeCodeType_name = map[int32]string{
	0: "TIMECODE_FILM",
	1: "TIMECODE_EBU",
	2: "TIMECODE_DF",
	3: "TIMECODE_SMPTE",
}
var TimeCodeType_value = map[string]int32{
	"TIMECODE_FILM":  0,
	"TIMECODE_EBU":   1,
	"TIMECODE_DF":    2,
	"TIMECODE_SMPTE": 3,
}

func (x TimeCodeType) Enum() *TimeCodeType {
	p := new(TimeCodeType)
	*p = x
	return p
}
func (x TimeCodeType) String() string {
	return proto.EnumName(TimeCodeType_name, int32(x))
}
func (x *TimeCodeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TimeCodeType_value, data, "TimeCodeType")
	if err != nil {
		return err
	}
	*x = TimeCodeType(value)
	return nil
}

// This is a special string which indicates that no response will be received
// for an RPC.
type STREAMING_NO_RESPONSE struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *STREAMING_NO_RESPONSE) Reset()         { *m = STREAMING_NO_RESPONSE{} }
func (m *STREAMING_NO_RESPONSE) String() string { return proto.CompactTextString(m) }
func (*STREAMING_NO_RESPONSE) ProtoMessage()    {}

// Generic Ack Message
type Ack struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}

// request the list of available plugins
type PluginListRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *PluginListRequest) Reset()         { *m = PluginListRequest{} }
func (m *PluginListRequest) String() string { return proto.CompactTextString(m) }
func (*PluginListRequest) ProtoMessage()    {}

// Trigger a plugin reload.
type PluginReloadRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *PluginReloadRequest) Reset()         { *m = PluginReloadRequest{} }
func (m *PluginReloadRequest) String() string { return proto.CompactTextString(m) }
func (*PluginReloadRequest) ProtoMessage()    {}

type PluginInfo struct {
	PluginId         *int32  `protobuf:"varint,1,req,name=plugin_id" json:"plugin_id,omitempty"`
	Name             *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	Active           *bool   `protobuf:"varint,3,req,name=active" json:"active,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PluginInfo) Reset()         { *m = PluginInfo{} }
func (m *PluginInfo) String() string { return proto.CompactTextString(m) }
func (*PluginInfo) ProtoMessage()    {}

func (m *PluginInfo) GetPluginId() int32 {
	if m != nil && m.PluginId != nil {
		return *m.PluginId
	}
	return 0
}

func (m *PluginInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *PluginInfo) GetActive() bool {
	if m != nil && m.Active != nil {
		return *m.Active
	}
	return false
}

type PluginListReply struct {
	Plugin           []*PluginInfo `protobuf:"bytes,1,rep,name=plugin" json:"plugin,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *PluginListReply) Reset()         { *m = PluginListReply{} }
func (m *PluginListReply) String() string { return proto.CompactTextString(m) }
func (*PluginListReply) ProtoMessage()    {}

func (m *PluginListReply) GetPlugin() []*PluginInfo {
	if m != nil {
		return m.Plugin
	}
	return nil
}

// request the description for a plugin
type PluginDescriptionRequest struct {
	PluginId         *int32 `protobuf:"varint,1,req,name=plugin_id" json:"plugin_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PluginDescriptionRequest) Reset()         { *m = PluginDescriptionRequest{} }
func (m *PluginDescriptionRequest) String() string { return proto.CompactTextString(m) }
func (*PluginDescriptionRequest) ProtoMessage()    {}

func (m *PluginDescriptionRequest) GetPluginId() int32 {
	if m != nil && m.PluginId != nil {
		return *m.PluginId
	}
	return 0
}

type PluginDescriptionReply struct {
	Name             *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Description      *string `protobuf:"bytes,2,req,name=description" json:"description,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PluginDescriptionReply) Reset()         { *m = PluginDescriptionReply{} }
func (m *PluginDescriptionReply) String() string { return proto.CompactTextString(m) }
func (*PluginDescriptionReply) ProtoMessage()    {}

func (m *PluginDescriptionReply) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *PluginDescriptionReply) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

// request the state for a plugin
type PluginStateRequest struct {
	PluginId         *int32 `protobuf:"varint,1,req,name=plugin_id" json:"plugin_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PluginStateRequest) Reset()         { *m = PluginStateRequest{} }
func (m *PluginStateRequest) String() string { return proto.CompactTextString(m) }
func (*PluginStateRequest) ProtoMessage()    {}

func (m *PluginStateRequest) GetPluginId() int32 {
	if m != nil && m.PluginId != nil {
		return *m.PluginId
	}
	return 0
}

type PluginStateReply struct {
	Name              *string       `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Enabled           *bool         `protobuf:"varint,2,req,name=enabled" json:"enabled,omitempty"`
	Active            *bool         `protobuf:"varint,3,req,name=active" json:"active,omitempty"`
	PreferencesSource *string       `protobuf:"bytes,4,req,name=preferences_source" json:"preferences_source,omitempty"`
	ConflictsWith     []*PluginInfo `protobuf:"bytes,5,rep,name=conflicts_with" json:"conflicts_with,omitempty"`
	XXX_unrecognized  []byte        `json:"-"`
}

func (m *PluginStateReply) Reset()         { *m = PluginStateReply{} }
func (m *PluginStateReply) String() string { return proto.CompactTextString(m) }
func (*PluginStateReply) ProtoMessage()    {}

func (m *PluginStateReply) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *PluginStateReply) GetEnabled() bool {
	if m != nil && m.Enabled != nil {
		return *m.Enabled
	}
	return false
}

func (m *PluginStateReply) GetActive() bool {
	if m != nil && m.Active != nil {
		return *m.Active
	}
	return false
}

func (m *PluginStateReply) GetPreferencesSource() string {
	if m != nil && m.PreferencesSource != nil {
		return *m.PreferencesSource
	}
	return ""
}

func (m *PluginStateReply) GetConflictsWith() []*PluginInfo {
	if m != nil {
		return m.ConflictsWith
	}
	return nil
}

// request info on a device
type DeviceInfoRequest struct {
	PluginId         *int32 `protobuf:"varint,1,opt,name=plugin_id" json:"plugin_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DeviceInfoRequest) Reset()         { *m = DeviceInfoRequest{} }
func (m *DeviceInfoRequest) String() string { return proto.CompactTextString(m) }
func (*DeviceInfoRequest) ProtoMessage()    {}

func (m *DeviceInfoRequest) GetPluginId() int32 {
	if m != nil && m.PluginId != nil {
		return *m.PluginId
	}
	return 0
}

type PortInfo struct {
	PortId             *int32  `protobuf:"varint,1,req,name=port_id" json:"port_id,omitempty"`
	PriorityCapability *int32  `protobuf:"varint,2,req,name=priority_capability" json:"priority_capability,omitempty"`
	Description        *string `protobuf:"bytes,5,req,name=description" json:"description,omitempty"`
	Universe           *int32  `protobuf:"varint,3,opt,name=universe" json:"universe,omitempty"`
	Active             *bool   `protobuf:"varint,4,opt,name=active" json:"active,omitempty"`
	PriorityMode       *int32  `protobuf:"varint,6,opt,name=priority_mode" json:"priority_mode,omitempty"`
	Priority           *int32  `protobuf:"varint,7,opt,name=priority" json:"priority,omitempty"`
	SupportsRdm        *bool   `protobuf:"varint,8,opt,name=supports_rdm,def=0" json:"supports_rdm,omitempty"`
	XXX_unrecognized   []byte  `json:"-"`
}

func (m *PortInfo) Reset()         { *m = PortInfo{} }
func (m *PortInfo) String() string { return proto.CompactTextString(m) }
func (*PortInfo) ProtoMessage()    {}

const Default_PortInfo_SupportsRdm bool = false

func (m *PortInfo) GetPortId() int32 {
	if m != nil && m.PortId != nil {
		return *m.PortId
	}
	return 0
}

func (m *PortInfo) GetPriorityCapability() int32 {
	if m != nil && m.PriorityCapability != nil {
		return *m.PriorityCapability
	}
	return 0
}

func (m *PortInfo) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *PortInfo) GetUniverse() int32 {
	if m != nil && m.Universe != nil {
		return *m.Universe
	}
	return 0
}

func (m *PortInfo) GetActive() bool {
	if m != nil && m.Active != nil {
		return *m.Active
	}
	return false
}

func (m *PortInfo) GetPriorityMode() int32 {
	if m != nil && m.PriorityMode != nil {
		return *m.PriorityMode
	}
	return 0
}

func (m *PortInfo) GetPriority() int32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return 0
}

func (m *PortInfo) GetSupportsRdm() bool {
	if m != nil && m.SupportsRdm != nil {
		return *m.SupportsRdm
	}
	return Default_PortInfo_SupportsRdm
}

type DeviceInfo struct {
	DeviceAlias      *int32      `protobuf:"varint,1,req,name=device_alias" json:"device_alias,omitempty"`
	PluginId         *int32      `protobuf:"varint,2,req,name=plugin_id" json:"plugin_id,omitempty"`
	DeviceName       *string     `protobuf:"bytes,3,req,name=device_name" json:"device_name,omitempty"`
	InputPort        []*PortInfo `protobuf:"bytes,4,rep,name=input_port" json:"input_port,omitempty"`
	OutputPort       []*PortInfo `protobuf:"bytes,5,rep,name=output_port" json:"output_port,omitempty"`
	DeviceId         *string     `protobuf:"bytes,6,req,name=device_id" json:"device_id,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *DeviceInfo) Reset()         { *m = DeviceInfo{} }
func (m *DeviceInfo) String() string { return proto.CompactTextString(m) }
func (*DeviceInfo) ProtoMessage()    {}

func (m *DeviceInfo) GetDeviceAlias() int32 {
	if m != nil && m.DeviceAlias != nil {
		return *m.DeviceAlias
	}
	return 0
}

func (m *DeviceInfo) GetPluginId() int32 {
	if m != nil && m.PluginId != nil {
		return *m.PluginId
	}
	return 0
}

func (m *DeviceInfo) GetDeviceName() string {
	if m != nil && m.DeviceName != nil {
		return *m.DeviceName
	}
	return ""
}

func (m *DeviceInfo) GetInputPort() []*PortInfo {
	if m != nil {
		return m.InputPort
	}
	return nil
}

func (m *DeviceInfo) GetOutputPort() []*PortInfo {
	if m != nil {
		return m.OutputPort
	}
	return nil
}

func (m *DeviceInfo) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

type DeviceInfoReply struct {
	Device           []*DeviceInfo `protobuf:"bytes,1,rep,name=device" json:"device,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *DeviceInfoReply) Reset()         { *m = DeviceInfoReply{} }
func (m *DeviceInfoReply) String() string { return proto.CompactTextString(m) }
func (*DeviceInfoReply) ProtoMessage()    {}

func (m *DeviceInfoReply) GetDevice() []*DeviceInfo {
	if m != nil {
		return m.Device
	}
	return nil
}

type DmxData struct {
	Universe         *int32 `protobuf:"varint,1,req,name=universe" json:"universe,omitempty"`
	Data             []byte `protobuf:"bytes,2,req,name=data" json:"data,omitempty"`
	Priority         *int32 `protobuf:"varint,3,opt,name=priority" json:"priority,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DmxData) Reset()         { *m = DmxData{} }
func (m *DmxData) String() string { return proto.CompactTextString(m) }
func (*DmxData) ProtoMessage()    {}

func (m *DmxData) GetUniverse() int32 {
	if m != nil && m.Universe != nil {
		return *m.Universe
	}
	return 0
}

func (m *DmxData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DmxData) GetPriority() int32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return 0
}

type RegisterDmxRequest struct {
	Universe         *int32          `protobuf:"varint,1,req,name=universe" json:"universe,omitempty"`
	Action           *RegisterAction `protobuf:"varint,2,req,name=action,enum=ola.proto.RegisterAction" json:"action,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *RegisterDmxRequest) Reset()         { *m = RegisterDmxRequest{} }
func (m *RegisterDmxRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterDmxRequest) ProtoMessage()    {}

func (m *RegisterDmxRequest) GetUniverse() int32 {
	if m != nil && m.Universe != nil {
		return *m.Universe
	}
	return 0
}

func (m *RegisterDmxRequest) GetAction() RegisterAction {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return RegisterAction_REGISTER
}

type PatchPortRequest struct {
	Universe         *int32       `protobuf:"varint,1,req,name=universe" json:"universe,omitempty"`
	DeviceAlias      *int32       `protobuf:"varint,2,req,name=device_alias" json:"device_alias,omitempty"`
	PortId           *int32       `protobuf:"varint,3,req,name=port_id" json:"port_id,omitempty"`
	Action           *PatchAction `protobuf:"varint,4,req,name=action,enum=ola.proto.PatchAction" json:"action,omitempty"`
	IsOutput         *bool        `protobuf:"varint,5,req,name=is_output" json:"is_output,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PatchPortRequest) Reset()         { *m = PatchPortRequest{} }
func (m *PatchPortRequest) String() string { return proto.CompactTextString(m) }
func (*PatchPortRequest) ProtoMessage()    {}

func (m *PatchPortRequest) GetUniverse() int32 {
	if m != nil && m.Universe != nil {
		return *m.Universe
	}
	return 0
}

func (m *PatchPortRequest) GetDeviceAlias() int32 {
	if m != nil && m.DeviceAlias != nil {
		return *m.DeviceAlias
	}
	return 0
}

func (m *PatchPortRequest) GetPortId() int32 {
	if m != nil && m.PortId != nil {
		return *m.PortId
	}
	return 0
}

func (m *PatchPortRequest) GetAction() PatchAction {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return PatchAction_PATCH
}

func (m *PatchPortRequest) GetIsOutput() bool {
	if m != nil && m.IsOutput != nil {
		return *m.IsOutput
	}
	return false
}

type UniverseNameRequest struct {
	Universe         *int32  `protobuf:"varint,1,req,name=universe" json:"universe,omitempty"`
	Name             *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UniverseNameRequest) Reset()         { *m = UniverseNameRequest{} }
func (m *UniverseNameRequest) String() string { return proto.CompactTextString(m) }
func (*UniverseNameRequest) ProtoMessage()    {}

func (m *UniverseNameRequest) GetUniverse() int32 {
	if m != nil && m.Universe != nil {
		return *m.Universe
	}
	return 0
}

func (m *UniverseNameRequest) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type MergeModeRequest struct {
	Universe         *int32     `protobuf:"varint,1,req,name=universe" json:"universe,omitempty"`
	MergeMode        *MergeMode `protobuf:"varint,2,req,name=merge_mode,enum=ola.proto.MergeMode" json:"merge_mode,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *MergeModeRequest) Reset()         { *m = MergeModeRequest{} }
func (m *MergeModeRequest) String() string { return proto.CompactTextString(m) }
func (*MergeModeRequest) ProtoMessage()    {}

func (m *MergeModeRequest) GetUniverse() int32 {
	if m != nil && m.Universe != nil {
		return *m.Universe
	}
	return 0
}

func (m *MergeModeRequest) GetMergeMode() MergeMode {
	if m != nil && m.MergeMode != nil {
		return *m.MergeMode
	}
	return MergeMode_HTP
}

// request info about a universe
type OptionalUniverseRequest struct {
	Universe         *int32 `protobuf:"varint,1,opt,name=universe" json:"universe,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OptionalUniverseRequest) Reset()         { *m = OptionalUniverseRequest{} }
func (m *OptionalUniverseRequest) String() string { return proto.CompactTextString(m) }
func (*OptionalUniverseRequest) ProtoMessage()    {}

func (m *OptionalUniverseRequest) GetUniverse() int32 {
	if m != nil && m.Universe != nil {
		return *m.Universe
	}
	return 0
}

type UniverseInfo struct {
	Universe         *int32     `protobuf:"varint,1,req,name=universe" json:"universe,omitempty"`
	Name             *string    `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	MergeMode        *MergeMode `protobuf:"varint,3,req,name=merge_mode,enum=ola.proto.MergeMode" json:"merge_mode,omitempty"`
	InputPortCount   *int32     `protobuf:"varint,4,req,name=input_port_count" json:"input_port_count,omitempty"`
	OutputPortCount  *int32     `protobuf:"varint,5,req,name=output_port_count" json:"output_port_count,omitempty"`
	RdmDevices       *int32     `protobuf:"varint,6,req,name=rdm_devices" json:"rdm_devices,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *UniverseInfo) Reset()         { *m = UniverseInfo{} }
func (m *UniverseInfo) String() string { return proto.CompactTextString(m) }
func (*UniverseInfo) ProtoMessage()    {}

func (m *UniverseInfo) GetUniverse() int32 {
	if m != nil && m.Universe != nil {
		return *m.Universe
	}
	return 0
}

func (m *UniverseInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *UniverseInfo) GetMergeMode() MergeMode {
	if m != nil && m.MergeMode != nil {
		return *m.MergeMode
	}
	return MergeMode_HTP
}

func (m *UniverseInfo) GetInputPortCount() int32 {
	if m != nil && m.InputPortCount != nil {
		return *m.InputPortCount
	}
	return 0
}

func (m *UniverseInfo) GetOutputPortCount() int32 {
	if m != nil && m.OutputPortCount != nil {
		return *m.OutputPortCount
	}
	return 0
}

func (m *UniverseInfo) GetRdmDevices() int32 {
	if m != nil && m.RdmDevices != nil {
		return *m.RdmDevices
	}
	return 0
}

type UniverseInfoReply struct {
	Universe         []*UniverseInfo `protobuf:"bytes,1,rep,name=universe" json:"universe,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *UniverseInfoReply) Reset()         { *m = UniverseInfoReply{} }
func (m *UniverseInfoReply) String() string { return proto.CompactTextString(m) }
func (*UniverseInfoReply) ProtoMessage()    {}

func (m *UniverseInfoReply) GetUniverse() []*UniverseInfo {
	if m != nil {
		return m.Universe
	}
	return nil
}

type PortPriorityRequest struct {
	DeviceAlias      *int32 `protobuf:"varint,1,req,name=device_alias" json:"device_alias,omitempty"`
	IsOutput         *bool  `protobuf:"varint,2,req,name=is_output" json:"is_output,omitempty"`
	PortId           *int32 `protobuf:"varint,3,req,name=port_id" json:"port_id,omitempty"`
	PriorityMode     *int32 `protobuf:"varint,4,req,name=priority_mode" json:"priority_mode,omitempty"`
	Priority         *int32 `protobuf:"varint,5,opt,name=priority" json:"priority,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PortPriorityRequest) Reset()         { *m = PortPriorityRequest{} }
func (m *PortPriorityRequest) String() string { return proto.CompactTextString(m) }
func (*PortPriorityRequest) ProtoMessage()    {}

func (m *PortPriorityRequest) GetDeviceAlias() int32 {
	if m != nil && m.DeviceAlias != nil {
		return *m.DeviceAlias
	}
	return 0
}

func (m *PortPriorityRequest) GetIsOutput() bool {
	if m != nil && m.IsOutput != nil {
		return *m.IsOutput
	}
	return false
}

func (m *PortPriorityRequest) GetPortId() int32 {
	if m != nil && m.PortId != nil {
		return *m.PortId
	}
	return 0
}

func (m *PortPriorityRequest) GetPriorityMode() int32 {
	if m != nil && m.PriorityMode != nil {
		return *m.PriorityMode
	}
	return 0
}

func (m *PortPriorityRequest) GetPriority() int32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return 0
}

// a device config request
type DeviceConfigRequest struct {
	DeviceAlias      *int32 `protobuf:"varint,1,req,name=device_alias" json:"device_alias,omitempty"`
	Data             []byte `protobuf:"bytes,2,req,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DeviceConfigRequest) Reset()         { *m = DeviceConfigRequest{} }
func (m *DeviceConfigRequest) String() string { return proto.CompactTextString(m) }
func (*DeviceConfigRequest) ProtoMessage()    {}

func (m *DeviceConfigRequest) GetDeviceAlias() int32 {
	if m != nil && m.DeviceAlias != nil {
		return *m.DeviceAlias
	}
	return 0
}

func (m *DeviceConfigRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type DeviceConfigReply struct {
	Data             []byte `protobuf:"bytes,1,req,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DeviceConfigReply) Reset()         { *m = DeviceConfigReply{} }
func (m *DeviceConfigReply) String() string { return proto.CompactTextString(m) }
func (*DeviceConfigReply) ProtoMessage()    {}

func (m *DeviceConfigReply) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// RDM Messages
// This represents a UID
type UID struct {
	EstaId           *int32  `protobuf:"varint,1,req,name=esta_id" json:"esta_id,omitempty"`
	DeviceId         *uint32 `protobuf:"fixed32,2,req,name=device_id" json:"device_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UID) Reset()         { *m = UID{} }
func (m *UID) String() string { return proto.CompactTextString(m) }
func (*UID) ProtoMessage()    {}

func (m *UID) GetEstaId() int32 {
	if m != nil && m.EstaId != nil {
		return *m.EstaId
	}
	return 0
}

func (m *UID) GetDeviceId() uint32 {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return 0
}

// Request the UID list for a universe
type UniverseRequest struct {
	Universe         *int32 `protobuf:"varint,1,req,name=universe" json:"universe,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *UniverseRequest) Reset()         { *m = UniverseRequest{} }
func (m *UniverseRequest) String() string { return proto.CompactTextString(m) }
func (*UniverseRequest) ProtoMessage()    {}

func (m *UniverseRequest) GetUniverse() int32 {
	if m != nil && m.Universe != nil {
		return *m.Universe
	}
	return 0
}

type DiscoveryRequest struct {
	Universe         *int32 `protobuf:"varint,1,req,name=universe" json:"universe,omitempty"`
	Full             *bool  `protobuf:"varint,2,req,name=full" json:"full,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DiscoveryRequest) Reset()         { *m = DiscoveryRequest{} }
func (m *DiscoveryRequest) String() string { return proto.CompactTextString(m) }
func (*DiscoveryRequest) ProtoMessage()    {}

func (m *DiscoveryRequest) GetUniverse() int32 {
	if m != nil && m.Universe != nil {
		return *m.Universe
	}
	return 0
}

func (m *DiscoveryRequest) GetFull() bool {
	if m != nil && m.Full != nil {
		return *m.Full
	}
	return false
}

type UIDListReply struct {
	Universe         *int32 `protobuf:"varint,1,req,name=universe" json:"universe,omitempty"`
	Uid              []*UID `protobuf:"bytes,2,rep,name=uid" json:"uid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *UIDListReply) Reset()         { *m = UIDListReply{} }
func (m *UIDListReply) String() string { return proto.CompactTextString(m) }
func (*UIDListReply) ProtoMessage()    {}

func (m *UIDListReply) GetUniverse() int32 {
	if m != nil && m.Universe != nil {
		return *m.Universe
	}
	return 0
}

func (m *UIDListReply) GetUid() []*UID {
	if m != nil {
		return m.Uid
	}
	return nil
}

type RDMRequest struct {
	Universe           *int32 `protobuf:"varint,1,req,name=universe" json:"universe,omitempty"`
	Uid                *UID   `protobuf:"bytes,2,req,name=uid" json:"uid,omitempty"`
	SubDevice          *int32 `protobuf:"varint,3,req,name=sub_device" json:"sub_device,omitempty"`
	ParamId            *int32 `protobuf:"varint,4,req,name=param_id" json:"param_id,omitempty"`
	Data               []byte `protobuf:"bytes,5,req,name=data" json:"data,omitempty"`
	IsSet              *bool  `protobuf:"varint,6,req,name=is_set" json:"is_set,omitempty"`
	IncludeRawResponse *bool  `protobuf:"varint,7,opt,name=include_raw_response,def=0" json:"include_raw_response,omitempty"`
	XXX_unrecognized   []byte `json:"-"`
}

func (m *RDMRequest) Reset()         { *m = RDMRequest{} }
func (m *RDMRequest) String() string { return proto.CompactTextString(m) }
func (*RDMRequest) ProtoMessage()    {}

const Default_RDMRequest_IncludeRawResponse bool = false

func (m *RDMRequest) GetUniverse() int32 {
	if m != nil && m.Universe != nil {
		return *m.Universe
	}
	return 0
}

func (m *RDMRequest) GetUid() *UID {
	if m != nil {
		return m.Uid
	}
	return nil
}

func (m *RDMRequest) GetSubDevice() int32 {
	if m != nil && m.SubDevice != nil {
		return *m.SubDevice
	}
	return 0
}

func (m *RDMRequest) GetParamId() int32 {
	if m != nil && m.ParamId != nil {
		return *m.ParamId
	}
	return 0
}

func (m *RDMRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RDMRequest) GetIsSet() bool {
	if m != nil && m.IsSet != nil {
		return *m.IsSet
	}
	return false
}

func (m *RDMRequest) GetIncludeRawResponse() bool {
	if m != nil && m.IncludeRawResponse != nil {
		return *m.IncludeRawResponse
	}
	return Default_RDMRequest_IncludeRawResponse
}

type RDMDiscoveryRequest struct {
	Universe           *int32 `protobuf:"varint,1,req,name=universe" json:"universe,omitempty"`
	Uid                *UID   `protobuf:"bytes,2,req,name=uid" json:"uid,omitempty"`
	SubDevice          *int32 `protobuf:"varint,3,req,name=sub_device" json:"sub_device,omitempty"`
	ParamId            *int32 `protobuf:"varint,4,req,name=param_id" json:"param_id,omitempty"`
	Data               []byte `protobuf:"bytes,5,req,name=data" json:"data,omitempty"`
	IncludeRawResponse *bool  `protobuf:"varint,6,opt,name=include_raw_response,def=0" json:"include_raw_response,omitempty"`
	XXX_unrecognized   []byte `json:"-"`
}

func (m *RDMDiscoveryRequest) Reset()         { *m = RDMDiscoveryRequest{} }
func (m *RDMDiscoveryRequest) String() string { return proto.CompactTextString(m) }
func (*RDMDiscoveryRequest) ProtoMessage()    {}

const Default_RDMDiscoveryRequest_IncludeRawResponse bool = false

func (m *RDMDiscoveryRequest) GetUniverse() int32 {
	if m != nil && m.Universe != nil {
		return *m.Universe
	}
	return 0
}

func (m *RDMDiscoveryRequest) GetUid() *UID {
	if m != nil {
		return m.Uid
	}
	return nil
}

func (m *RDMDiscoveryRequest) GetSubDevice() int32 {
	if m != nil && m.SubDevice != nil {
		return *m.SubDevice
	}
	return 0
}

func (m *RDMDiscoveryRequest) GetParamId() int32 {
	if m != nil && m.ParamId != nil {
		return *m.ParamId
	}
	return 0
}

func (m *RDMDiscoveryRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RDMDiscoveryRequest) GetIncludeRawResponse() bool {
	if m != nil && m.IncludeRawResponse != nil {
		return *m.IncludeRawResponse
	}
	return Default_RDMDiscoveryRequest_IncludeRawResponse
}

type RDMResponse struct {
	ResponseCode      *RDMResponseCode `protobuf:"varint,1,req,name=response_code,enum=ola.proto.RDMResponseCode" json:"response_code,omitempty"`
	SourceUid         *UID             `protobuf:"bytes,9,opt,name=source_uid" json:"source_uid,omitempty"`
	DestUid           *UID             `protobuf:"bytes,10,opt,name=dest_uid" json:"dest_uid,omitempty"`
	TransactionNumber *int32           `protobuf:"varint,11,opt,name=transaction_number" json:"transaction_number,omitempty"`
	// ACK, NACK or TIMER
	ResponseType     *RDMResponseType `protobuf:"varint,2,opt,name=response_type,enum=ola.proto.RDMResponseType" json:"response_type,omitempty"`
	MessageCount     *uint32          `protobuf:"varint,3,opt,name=message_count,def=0" json:"message_count,omitempty"`
	SubDevice        *uint32          `protobuf:"varint,7,opt,name=sub_device" json:"sub_device,omitempty"`
	CommandClass     *RDMCommandClass `protobuf:"varint,6,opt,name=command_class,enum=ola.proto.RDMCommandClass" json:"command_class,omitempty"`
	ParamId          *uint32          `protobuf:"varint,5,opt,name=param_id" json:"param_id,omitempty"`
	Data             []byte           `protobuf:"bytes,4,opt,name=data,def=" json:"data,omitempty"`
	RawResponse      [][]byte         `protobuf:"bytes,8,rep,name=raw_response" json:"raw_response,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *RDMResponse) Reset()         { *m = RDMResponse{} }
func (m *RDMResponse) String() string { return proto.CompactTextString(m) }
func (*RDMResponse) ProtoMessage()    {}

const Default_RDMResponse_MessageCount uint32 = 0

func (m *RDMResponse) GetResponseCode() RDMResponseCode {
	if m != nil && m.ResponseCode != nil {
		return *m.ResponseCode
	}
	return RDMResponseCode_RDM_COMPLETED_OK
}

func (m *RDMResponse) GetSourceUid() *UID {
	if m != nil {
		return m.SourceUid
	}
	return nil
}

func (m *RDMResponse) GetDestUid() *UID {
	if m != nil {
		return m.DestUid
	}
	return nil
}

func (m *RDMResponse) GetTransactionNumber() int32 {
	if m != nil && m.TransactionNumber != nil {
		return *m.TransactionNumber
	}
	return 0
}

func (m *RDMResponse) GetResponseType() RDMResponseType {
	if m != nil && m.ResponseType != nil {
		return *m.ResponseType
	}
	return RDMResponseType_RDM_ACK
}

func (m *RDMResponse) GetMessageCount() uint32 {
	if m != nil && m.MessageCount != nil {
		return *m.MessageCount
	}
	return Default_RDMResponse_MessageCount
}

func (m *RDMResponse) GetSubDevice() uint32 {
	if m != nil && m.SubDevice != nil {
		return *m.SubDevice
	}
	return 0
}

func (m *RDMResponse) GetCommandClass() RDMCommandClass {
	if m != nil && m.CommandClass != nil {
		return *m.CommandClass
	}
	return RDMCommandClass_RDM_GET_RESPONSE
}

func (m *RDMResponse) GetParamId() uint32 {
	if m != nil && m.ParamId != nil {
		return *m.ParamId
	}
	return 0
}

func (m *RDMResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RDMResponse) GetRawResponse() [][]byte {
	if m != nil {
		return m.RawResponse
	}
	return nil
}

type TimeCode struct {
	Hours            *uint32       `protobuf:"varint,1,req,name=hours" json:"hours,omitempty"`
	Minutes          *uint32       `protobuf:"varint,2,req,name=minutes" json:"minutes,omitempty"`
	Seconds          *uint32       `protobuf:"varint,3,req,name=seconds" json:"seconds,omitempty"`
	Frames           *uint32       `protobuf:"varint,4,req,name=frames" json:"frames,omitempty"`
	Type             *TimeCodeType `protobuf:"varint,5,req,name=type,enum=ola.proto.TimeCodeType" json:"type,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *TimeCode) Reset()         { *m = TimeCode{} }
func (m *TimeCode) String() string { return proto.CompactTextString(m) }
func (*TimeCode) ProtoMessage()    {}

func (m *TimeCode) GetHours() uint32 {
	if m != nil && m.Hours != nil {
		return *m.Hours
	}
	return 0
}

func (m *TimeCode) GetMinutes() uint32 {
	if m != nil && m.Minutes != nil {
		return *m.Minutes
	}
	return 0
}

func (m *TimeCode) GetSeconds() uint32 {
	if m != nil && m.Seconds != nil {
		return *m.Seconds
	}
	return 0
}

func (m *TimeCode) GetFrames() uint32 {
	if m != nil && m.Frames != nil {
		return *m.Frames
	}
	return 0
}

func (m *TimeCode) GetType() TimeCodeType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return TimeCodeType_TIMECODE_FILM
}

func init() {
	proto.RegisterEnum("ola.proto.RegisterAction", RegisterAction_name, RegisterAction_value)
	proto.RegisterEnum("ola.proto.PatchAction", PatchAction_name, PatchAction_value)
	proto.RegisterEnum("ola.proto.MergeMode", MergeMode_name, MergeMode_value)
	proto.RegisterEnum("ola.proto.PluginIds", PluginIds_name, PluginIds_value)
	proto.RegisterEnum("ola.proto.RDMResponseCode", RDMResponseCode_name, RDMResponseCode_value)
	proto.RegisterEnum("ola.proto.RDMResponseType", RDMResponseType_name, RDMResponseType_value)
	proto.RegisterEnum("ola.proto.RDMCommandClass", RDMCommandClass_name, RDMCommandClass_value)
	proto.RegisterEnum("ola.proto.TimeCodeType", TimeCodeType_name, TimeCodeType_value)
}
